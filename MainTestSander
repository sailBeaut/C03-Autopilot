import h5py
import sympy as sp
from check_data import dat_array, print_struc
import numpy as np
import matplotlib.pyplot as plt

# Load data
DeltaAil = dat_array("run8/aircraft/DeltaAil")
IservoAil = dat_array("run8/aircraft/IservoAil")

# Parametric constants
c1 = 0.1  # damper constant TUNING PARAMETER
k1 = 0.1  # spring constant TUNING PARAMETER
kg = -0.45  # gain SET PARAMETER
Ie = 0.1  # moment of inertia TUNING PARAMETER

for i in range(10):
    k1 = 0.1
    xlist = []
    for j in range(10):
        c1 = 0.1
        xlist = []

        for l in range(10):
            xlist = []
            # Define symbolic matrices
            A = sp.Matrix([[-(c1/Ie), -(k1/Ie)], 
                        [1, 0]])
            B = sp.Matrix([[kg/Ie], 
                        [0]])

            # Initial conditions
            x = sp.Matrix([[0], [0.013]])  # Initial state (angle and velocity)

            # Time integration loop
            dt = 0.001  # Time step
            for i in range(7001):
                u = sp.Matrix([[IservoAil[i]]])  # Control input
                
                # Compute xdot = A * x + B * u
                xdot = A @ x + B @ u
                #print(xdot)
                x = x + xdot * dt  # Euler integration step

                # Store angle (first element of x)
                xlist.append(x[1])
                #if i % 1000 == 0:
                    #print(f"Step {i}: x = {x}")

                if ((xlist[i]-DeltaAil[i])**2) <= 0.000000002:
                    break
                else:
                    c1 = c1 + 1
            k1 = k1 + 1
        Ie = Ie + 1
            
    
print(len(xlist))
error = sum((xlist-DeltaAil)**2)
# Plot results
plt.plot(np.linspace(0, 7000, 7001), xlist, color="r", label="Computed")
plt.plot(np.linspace(0, 7000, 7001), DeltaAil, color="b", label="Actual")
plt.legend()
print(error)
plt.show()

